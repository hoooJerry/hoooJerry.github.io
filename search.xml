<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Node.js学习笔记(一)]]></title>
    <url>%2F2019%2F07%2F24%2FNode-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 Node.js适用场景 Node.js 擅长处理 I/O，不善于计算（单线程的缺点），因此 Node.js 适用于：当应用程序需要处理大量并发的 I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js 也非常适合与 web socket 配合，开发长连接的实时交互应用程序。 比如：聊天室，博客系统，考试系统等。 全局对象 在 JavaScript 中全局对象通常是 window，而在 Node.js 中全局对象是 globa，所有全局变量（除了 global 本身以外）都是 global 对象的属性，我们可以直接访问到 global 的属性 全局变量 按照 ECMAScript 的定义，满足以下条 件的变量是全局变量： 在最外层定义的变量 全局对象的属性 隐式定义的变量（未定义直接赋值的变量） 当你定义一个全局变量的时候，这个变量同时也会成为全局对象的属性，反之亦然。在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的，而模块本身不是最外层上下文。定义变量一定要使用 var 关键字，因为全局变量会污染命名空间。 常见全局变量和全局函数 __filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。如果在模块中，返回的值是模块文件的路径。 __dirname，表示当前执行脚本所在的目录。 setTimeout(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb),只执行一次函数。 require方法–创建hello world Node中的JavaScript可以具备文件操作能力，得益于丰富的API。 引入核心模块fs，调用相应的API即可实现 黑马程序员实验楼12345678910111213var fs = require('fs')//用require方法创建实例fs.writeFile('./hello.md','写入一段文本')var http = require('http')var server = http.createServer()server.on('request',function(request,response)&#123; console.log('收到请求:'+request.url) response.write('hello') response.end()&#125;)server.listen(3000,function()&#123; console.log('启动咯')&#125;)123456var http = require('http');http.createServer(function(request,response)&#123; response.writeHead(200,&#123;'Content-Type':'text/plain'&#125;); response.end('hello world');&#125;).listen(8080);console.log('开启咯') http.createServer([requestListener]) 其中requestListener 请求函数是一个自动添加到 ‘request’ 事件的函数。函数传递有两个参数：request 请求对象 和 response 响应对象。 response 对象常用的方法有： response.writeHead(statusCode[, statusMessage][, headers])。表示向请求发送响应头。 response.write() 发送一块响应主体，也就是说用来给客户端发送响应数据。可以直接写文本信息，也可以写我们的 html 代码，注意要设置 Content-Type 的值 。write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待。 response.end() 此方法向服务器发出信号，表示已发送所有响应头和主体，该服务器应该视为此消息完成。必须在每个响应上调用方法 response.end()。 request对象的常用方法： request.url 获取请求路径，获取到的是端口号之后的那一部分路径,也就是说所有的 url 都是以 / 开头的，判断路径处理响应。 request.socket.localAddress 获取 ip 地址。 request.socket.remotePort 获取源端口。 Node.js包 用于管理多个模块及其依赖关系，可以对多个模块进行封装，包的根目录必须包含 package.json 文件，package.json 文件是 CommonJS 规范用于描述包的文件，符合 CommonJS 规范的 package.json 文件一般包含以下字段： name：包名。包名是唯一的，只能包含小写字母、数字和下划线。 version：包版本号。 description：包说明。 keywords：关键字数组，用于搜索。 homepage：项目主页。 bugs：提交 bug 的地址。 license：许可证。 maintainers：维护者数组。 contributors：贡献者数组。 repositories：项目仓库托管地址数组。 dependencies：包依赖。 packae.json包示例 123456789101112131415161718192021222324252627282930313233343536&#123; "name": "shiyanlou", "description": "Shiyanlou test package.", "version": "0.1.0", "keywords": [ "shiyanlou", "nodejs" ], "maintainers": [&#123; "name": "test", "email": "test@shiyanlou.com" &#125;], "contributors": [&#123; "name": "test", "web": "http://www.shiyanlou.com/" &#125;], "bugs": &#123; "mail": "test@shiyanlou.com", "web": "http://www.shiyanlou.com/" &#125;, "licenses": [&#123; "type": "Apache License v2", "url": "http://www.apache.org/licenses/apache2.html" &#125;], "repositories": [&#123; "type": "git", "url": "http://github.com/test/test.git" &#125;], "dependencies": &#123; "webkit": "1.2", "ssl": &#123; "gnutls": ["1.0", "2.0"], "openssl": "0.9.8" &#125; &#125;&#125; 注： package.json 文件可以自己手动编辑，还可以通过 npm init 命令进行生成。你可以自己尝试在终端中输入 npm init 命令来生成一个包含 package.json 文件的包。直接输入 npm init --yes 跳过回答问题步骤，直接生成默认值的 package.json 文件。 安装包 npm install express 更新包 npm update express 删除包 npm uninstall express Node.js模块 在 JavaScript 中，我们通常把 JavaScript 代码分为几个 js 文件，然后在浏览器中将这些 js 文件合并运行，但是在 Node.js 中，是通过以模块为单位来划分所有功能的，每一个模块为一个 js 文件，每一个模块中定义的全局变量和函数的作用范围也被限定在这个模块之内，只有使用 exports 对象才能传递到外部使用。 ▶1.js 1234function foo()&#123; console.log('hello');&#125;module.exports.foo = foo;//用module.exports导出,也可以直接exports导出 ▶2.js 12var hello = require('./1.js');hello.foo(); require 加载模块，以’/’ 为前缀的模块是文件的绝对路径。’./’ 为前缀的模块是相对于调用 require() 的文件的，上面的例子中 index.js 和 myModule.js 是在同一个目录下（project 目录）。当没有以 ‘/’、’./’ 或 ‘…/’ 开头来表示文件时，这个模块必须是一个核心模块或加载自 node_modules 目录。 module.exports 和 exports 的区别 每次导出接口成员的时候都通过 module.exports.xxx = xxx 的方式很麻烦。所以，Node.js 为了简化你的操作，专门提供了一个变量：exports 等于 module.exports。也就是说在模块中还有这么一句代码： var exports = module.exports; 让我们看一下它们 1234567a = &#123; b:3&#125;console.log(a);console.log(module.exports);console.log(exports == module.exports)console.log(exports === module.exports) 运行结果： 1234567exports = &#123; b:3&#125;console.log(exports);console.log(module.exports);console.log(exports == module.exports)console.log(exports === module.exports) 运行结果： 也就是说给 exports 赋值会断开和 module.exports 之间的引用，同样的给 module.exports 重新赋值也会断开它们之间的引用。但是最终导出的是 module.exports。而如果给其他变量赋值则没有对exports 和 module.exports之间的引用造成改变。 总结： require 得到的是 module.exports 导出的值，导出多个成员可以用 module.exports 和 exports,导出单个成员只能用 module.exports。 Node.js函数 在 JavaScript 中，一个函数可以作为另一个函数的参数。我们可以先定义一个函数，然后把函数作为变量在另一个函数中传递，也可以在传递参数的地方直接定义函数。 1234567function sayHi(value)&#123; console.log(value);&#125;function execute(someFunction,value)&#123; someFunction(value);&#125;execute(sayHi,'hi'); 匿名函数 123var fun = function()&#123;&#125; 箭头函数 1234567891011(参数1, 参数2, …, 参数N) =&gt; &#123; 函数声明 &#125;//相当于：(参数1, 参数2, …, 参数N) =&gt;&#123; return 表达式; &#125;(参数1, 参数2, …, 参数N) =&gt; 表达式（单一）// 当只有一个参数时，圆括号是可选的(单一参数) =&gt; &#123;函数声明&#125;单一参数 =&gt; &#123;函数声明&#125;// 没有参数的函数应该写成一对圆括号。() =&gt; &#123;函数声明&#125; 示例： 12345var fun = function()&#123; console.log('hello syl');&#125;//上面的匿名函数可以用箭头函数改写为下面的var fun = () =&gt; console.log('hello syl'); Node.js 异步编程 Node.js 异步编程的直接体现就是回调。回调函数在完成任务后就会被调用，Node.js 使用了大量的回调函数，Node.js 所有 API 都支持回调函数。回调函数一般作为函数的最后一个参数出现。 阻塞代码 1234var fs = require('fs');var data = fs.readFileSync('1.txt');console.log(data.toString());console.log('end') 运行结果： 非阻塞代码 123456var fs = require('fs');fs.readFile('1.txt',function (err,data)&#123; if(err) return console.error(err); console.log(data.toString());&#125;);console.log('end'); 运行结果： 第一个实例在文件读取完后才执行完程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。 异步打开文件 fs.open(path, flags[, mode], callback) 参数说明： path:文件的路径 flags：文件打开的行为。 mode：设置文件模式(权限)，文件创建默认权限为 0o666（可读写）。mode 设置文件模式（权限和粘滞位），但仅限于创建文件的情况。在 Windows 上，只能操作写权限。 callback：回调函数，带有两个参数如：callback(err, fd)。 flags 参数可以是以下值： ‘a’ - 打开文件用于追加。如果文件不存在，则创建该文件。 ‘ax’ - 与 ‘a’ 相似，但如果路径存在则失败。 ‘a+’ - 打开文件用于读取和追加。如果文件不存在，则创建该文件。 ‘ax+’ - 与 ‘a+’ 相似，但如果路径存在则失败。 ‘as’ - 以同步模式打开文件用于追加。如果文件不存在，则创建该文件。 ‘as+’ - 以同步模式打开文件用于读取和追加。如果文件不存在，则创建该文件。 ‘r’ - 打开文件用于读取。如果文件不存在，则会发生异常。 ‘r+’ - 打开文件用于读取和写入。如果文件不存在，则会发生异常。 ‘rs+’ - 以同步模式打开文件用于读取和写入。指示操作系统绕开本地文件系统缓存。这对于在 NFS 挂载上打开文件非常有用，因为它允许跳过可能过时的本地缓存。 它对 I/O 性能有非常实际的影响，因此除非需要，否则不建议使用此标志。这不会将 fs.open() 或 fsPromises.open() 转换为同步的阻塞调用。 如果需要同步操作，则应使用 fs.openSync() 之类的操作。 ‘w’ - 打开文件用于写入。创建文件（如果它不存在）或截断文件（如果存在）。 ‘wx’ - 与 ‘w’ 相似，但如果路径存在则失败。 ‘w+’ - 打开文件用于读取和写入。创建文件（如果它不存在）或截断文件（如果存在）。 ‘wx+’ - 与 ‘w+’ 相似，但如果路径存在则失败。 Node.js事件 大多数 Node.js 核心 API 构建于惯用的异步事件驱动架构，其中某些类型的对象（又称触发器，Emitter）会触发命名事件来调用函数（又称监听器，Listener）。比如：fs.readStream 打开文件时会发出一个事件。可以通过 require(“events”); 获得 event 模块。通常，事件名采用“驼峰式”(即单词首字母大写，其他字母小写)命名方式。 EventEmitter 所有能触发事件的对象都是 EventEmitter 类的实例。这些对象有一个 eventEmitter.on() 函数，用于将一个或多个函数绑定到命名事件上。当 EventEmitter 对象触发一个事件时，所有绑定在该事件上的函数都会被同步地调用。 ** EventEmitter类获取** 1234// 引入 events 模块var events = require('events');// 创建 eventEmitter 对象var eventEmitter = new events.EventEmitter(); 添加监听器 emitter.on(eventName, listener) 使用 emitter.on(eventName, listener) 方法为指定事件注册一个监听器。添加 listener 函数到名为 eventName 的事件的监听器数组的末尾。 别名 emitter.addListener(eventName, listener) 注意，这种注册监听器的方法将监听器一直保留在内存中 参数说明： eventName：事件名称，string 类型。 listener：回调函数。 示例 123456789101112//引入 events 模块var events = require('events');// 创建 emitter 对象var emitter = new events.EventEmitter();//为 connection 事件注册一个监听器emitter.on('connection', function() &#123; console.log('已连接');&#125;);//一秒后调用监听器setTimeout(function() &#123; emitter.emit('connection');&#125;, 1000); 运行结果： 其原理是emitter对象给connection事件注册了监听器，用setTimeout函数1000毫秒后向emitter对象发送事件connection，此时调用它的监听器。emit方法就是发送事件的。 使用emitter.emit(eventName[, ...args])按照监听器注册的顺序，同步地调用每个注册到名为eventName的事件的监听器，并传入提供的参数。如果事件有注册监听返回 true，否则返回 false。 参数说明： eventName ：事件名称 args：传递的参数，多个，类型为任意。 默认情况下，事件监听器会按照添加的顺序依次调用。emitter.prependListener() 方法可用于将事件监听器添加到监听器数组的开头。 例如在setTimeout前添加，emitter.prependListener('connection',() =&gt;console.log('hh'));，将会先打印hh,再打印已连接。 eventEmitter.once(eventName, listener) 此可以注册最多可调用一次的监听器。 当事件被触发时，监听器会被注销，然后再调用。 而emitter.prependOnceListener() 方法可用于将事件监听器添加到监听器数组的开头。 移除监听器 emitter.removeListener(eventName, listener) 参数说明： eventName 事件名称 listener 监听器也就是回调函数名称。 注：removeListener() 最多只会从监听器数组中移除一个监听器。我们可以多次调用 removeListener() 的方式来一个个的移除我们需要移除掉的监听器。 emitter.off(eventName, listener)是emitter.removeListener()的别名 emitter.removeAllListeners([eventName]) 使用 emitter.removeAllListeners([eventName]) 移除全部监听器或指定的 eventName 事件的监听器。 设置监听器最大绑定数 emitter.setMaxListeners(n) 默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告，这有助于我们发现内存泄露。显然实际编码中并不是所有的事件都要限制 10 个监听器。 emitter.setMaxListeners() 方法可以为指定的 EventEmitter 实例修改限制。当值设为 Infinity（或 0）表示不限制监听器的数量。 查看事件绑定的监听器个数 emitter.listenerCount(eventName) error事件 当 EventEmitter 实例出错时，应该触发 ‘error’ 事件。 如果没有为 ‘error’ 事件注册监听器，则当 ‘error’ 事件触发时，会抛出错误、打印堆栈跟踪、并退出 Node.js 进程。 通常我们要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。 123456var events = require('events');var emitter = new events.EventEmitter();emitter.on('error',(err)=&gt;&#123; console.error('错误');&#125;);emitter.emit('error');]]></content>
  </entry>
  <entry>
    <title><![CDATA[海边出游&&日式烧烤]]></title>
    <url>%2F2019%2F07%2F23%2F%E6%B5%B7%E8%BE%B9%E5%87%BA%E6%B8%B8and%E6%97%A5%E5%BC%8F%E7%83%A7%E7%83%A4%2F</url>
    <content type="text"><![CDATA[输入密码叭~ Incorrect Password! No content to display! U2FsdGVkX19PdRCwaotTyHrnqE+QAzaiQ6Zg5NyLNiCgAFbau91Pb4jHVto7KTD7IyEfw9JprEFLn7AYm5JCwe7QlZjIsj2RFSXG9bUKchvsUnypK+6NkZq3fjCCk9pfBBAdkV1EWNIkjUEO0GL2iWHeHnvHYykPx/Ntc/C/cmWZC54Rcz+w+92eDondZzykJCOy6WXK4R/H4HMCSY5gxjGGnCmQkSGslpUppDeRTH68kAnc4iBLUzve0CFE7OvVnhEy4UoiFepz6UsMxWorBdygwVitnCPqxx/sZuYyFOjsIYWe3zu1BIMfA1bJEcpeP3/ojjWXeyGclSfS1eAZjzommKXgWMiCEvt0wAgyLt/ca9nY2hXrPAoacEdd4y1FC6xZa2S4o/XaEp+Jb83DRSagy7zDAWj9/GKT5h2blTnrzPBcQSi3uVcJ7Vfw8v50PJp3Ouy8/TPMEZ9cYe0TGg31NyPXAbz7A9wLicYXkapX/9y/GACYZ9bYAdDUYHTdoQ2Kaab902FAavPCwdbPp2nLbKQJeTb3nHJPvGOHSTFd3t7yO1zbunxhLjDweAGAoSrF97iLPqIj2LmnOm23ltkLaqgp6vX/Qucgb+CuBltHgge/0R0Z7tf2CVJvsBiC/IuF6ffeFKjyBCejXxeb00gwU15gqelKJZUu7T+VgtZ9tboJbztEFpt3yd65qtjqihh0kc3b+H6COYZhzBkzPHmq70efyAJLCdpbz4bgzJshE6CsM0vxUazvAAWYC7cK4bIrgl2JhaRiF/sQ0j6KcNydVRsTLjKpQFu8Zj77eTMzTxlCCkEvi9xZ0XwHJm5CqKTg1rPW0lCVgmkyPgkl1z7B08WuzNR0oHysRD4DVh6TVHywQXwf9jLLO116SWeytB0BgLgfCFdNwgJLWGXVk3omAYXLFcasfarzJrueBIgQgYy258Ma1dY4nYLDhzCQeDLz1ek0eMNg3TNrgVU4KK+9nMrThuiiOag9arw1yRzRHTysbtcE1fxcoz9SilhGathjNWdZu9wn4gArtYNNMNYPgkP2CkY/PZPAQDuMTHBUfSPpxrIpMsu/u053+2Ndm4C+o4sjBKZe84DwD9lYZBJXELE8bXRjgbbA2Fiz1bS1cU7vTwhLibe8DRsgbNVEPM+BpKgH/33FQoH6OnRnBgNDhQhAp8v2ev+mOHCpG43oGoXfnydDrPP5jjNlmBoSVtV6yd05/YSa+zQoadpoKGY83X7Ltfp2puCtetKQ+lA6WFHQ7P4MluMT02MJXhgtim4WzX0GWt7u1xzZvHn4XLeIwOMJttozHj4UgaGYkAMbeWp/1VzKSeDvObtJNePLO9POEWycAk/BzBl1OpdLGq2ZxQ3E9KiLqGg5K6JXnUIG7rs0k3UqYE5KccZYNE9mfl3LAadOdSMFFI6UEt5KH/rJIuJ8Uc+TkoQ37N4eFUCJ0N/xiSyH7d99HE/vj+sXJI0qs6mQBuiWcXhl2djR3mLjQ8knQ1KGTSqo6dY4PKlS+Q0wPVjxI1JNzBDZ0FsVSU6+egWNsEqyp0S9tM/0eFuqlnHM6g8vu61Pg42zYdK/PzFeNIxo66LdfJhLELFu6RgsBROjPfqTlVhaks5sIo8QfAz97gxMb/zlh1BYoNj8f+rQYDyvUMMjzv2Aa2DQX776tK4OL6KB1fHCAdDChaMnF0w0nS1wat2V5mq0cyYIGos5CKZrPFo/8Z/rs8f2/I3UPQKHiyWqPp/JEMiXQ/ktzwwFFreIP8JaL4ew8e2Ogu7XasZXNsnpTC6+8SbiGkpi/O1kO0KHYLIcI+9zp8P4sfrVuFj8oYIF9VsZ0uz6blvUx8isln/JS0t/1Y8SLaq/5zMhXQHwkj9uJlnaaQ==]]></content>
      <categories>
        <category>出游</category>
        <category>美食</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[前端笔记(二)]]></title>
    <url>%2F2019%2F07%2F08%2F%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[暗昧处见光明世界 此心即白日青天 HTML布局 div 布局 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;head lang="en"&gt; &lt;style type="text/css"&gt; body&#123; margin: 0px;/*这是将页面铺满*/ &#125; div#container&#123; width: 100%; height: 900px; background-color: aliceblue; &#125; div#header&#123; width: 100%; height: 10%; background-color: aquamarine; &#125; div#content_menu&#123; width: 30%; height: 80%; background-color: bisque; float: left; &#125; div#content_body&#123; width: 70%; height: 80%; float: left; &#125; div#footer&#123; width: 100%; height: 10%; background-color: brown; clear: both;/*必须要清除float样式才能正确显示底部否则无法*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="container"&gt; &lt;div id="header"&gt;头部&lt;/div&gt; &lt;div id="content_menu"&gt;内容菜单&lt;/div&gt; &lt;div id="content_body"&gt;内容主体&lt;/div&gt; &lt;div id="footer"&gt;底部&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; table 布局 1234567891011121314&lt;body marginheight="0px" marginwidth="0px"&gt; &lt;table width="100%" height="950px" style="background-color: darkcyan"&gt; &lt;tr&gt; &lt;td colspan="2" width="100%" height="10%" style="background-color: rebeccapurple"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;左菜单&lt;/td&gt; &lt;td&gt;右菜单&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;底部&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; 表单 12345678910111213141516171819202122232425262728293031&lt;body&gt; &lt;form&gt; 用户名： &lt;input type="text"&gt; &lt;br/&gt; 密码： &lt;input type="text"&gt; &lt;br/&gt; &lt;input type="submit" value="确认"&gt;/*下面是复选框*/ 你喜欢的水果有？&lt;br/&gt; 西红柿&lt;input type="checkbox"&gt; apple&lt;input type="checkbox"&gt; banana&lt;input type="checkbox"&gt;/*下面是单选框*/ &lt;br/&gt; sex: 男&lt;input type="radio" name="sex"&gt; 女&lt;input type="radio" name="sex"&gt;/*下拉列表*/ &lt;select&gt; &lt;option&gt;12213132&lt;/option&gt; &lt;option&gt;23213231&lt;/option&gt; &lt;option&gt;12414123&lt;/option&gt; &lt;/select&gt;/*文本域*/ &lt;textarea cols="30" rows="30"&gt;请输入&lt;/textarea&gt; &lt;/form&gt;&lt;/body&gt; 实现与php文件交互 1234567891011&lt;body&gt; &lt;form action="xxx.php" method="GET"&gt;/*具体的php文件目录*/ 用户名： &lt;input type="text"&gt; &lt;br/&gt; 密码： &lt;input type="text"&gt; &lt;br/&gt; &lt;input type="submit" value="确认"&gt; &lt;/form&gt;&lt;/body&gt; 内联框架----&lt;ifame&gt; 可以理解成，页面套页面？ &lt;iframe src=&quot;....&quot; frameborder=&quot;0&quot; width=&quot;100px&quot; height=&quot;100px&quot;&gt;&lt;/iframe&gt; HTMLCSS123456789101112131415&lt;article class="forecast"&gt; &lt;h1&gt;Weather forecast for Seattle&lt;/h1&gt; &lt;article class="day-forecast"&gt; &lt;h2&gt;03 March 2018&lt;/h2&gt; &lt;p&gt;Rain.&lt;/p&gt; &lt;/article&gt; &lt;article class="day-forecast"&gt; &lt;h2&gt;04 March 2018&lt;/h2&gt; &lt;p&gt;Periods of rain.&lt;/p&gt; &lt;/article&gt; &lt;article class="day-forecast"&gt; &lt;h2&gt;05 March 2018&lt;/h2&gt; &lt;p&gt;Heavy rain.&lt;/p&gt; &lt;/article&gt;&lt;/article&gt;123456789101112131415161718192021222324.forecast &#123; margin: 0; padding: .3rem; background-color: #eee; font: 1rem 'Fira Sans', sans-serif;&#125;.forecast &gt; h1,.day-forecast &#123; margin: .5rem; padding: .3rem; font-size: 1.2rem;&#125;.day-forecast &#123; background: right/contain content-box border-box no-repeat url('/media/examples/rain.svg') white;&#125;.day-forecast &gt; h2,.day-forecast &gt; p &#123; margin: .2rem; font-size: 1rem;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[飞驰人生二刷有感]]></title>
    <url>%2F2019%2F07%2F05%2F%E9%A3%9E%E9%A9%B0%E4%BA%BA%E7%94%9F%E4%BA%8C%E5%88%B7%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[“ 我没想赢，但我不想输。 今年年初的时候和女票一起去看的飞驰人生，这不是我们看的第一部电影，但确是一起看的第一部喜剧片。当时就很想写下自己的感受，但是看了知乎的一些大牛写的精彩绝伦的影评后，我放弃了。他们写的太好了（豹头痛哭） 再加上寒假的事情比较多，就一直拖了下去。最近又要放暑假了😆，所以准备把年初的flag解决掉！ 于是我又二刷了飞驰人生。 首先，不得不说，韩寒拍的这部电影真的打动了我，再加上沈腾自带笑点的buff，可以说这是一部我认为相当优秀的喜剧片了。也许它并不能算是纯喜剧，因为故事结局并不是皆大欢喜，但是导演巧妙地给我们留下了一个蒙太奇般的的结局，这点也是我非常欣赏的地方，你可以认为张弛活着，当然你也可以猜出他的结局，这些并不重要。 重要的是，他为我们展现了一个人，一个热爱着赛车事业的男人，为了他的荣誉，为了责任，为了家人为了朋友而奉献自己的故事。在他的身上，我们看到了自己的影子。 电影中，有着这样一幕，当高华阳还是学员的时候，他问张弛，有没有什么一招必胜的绝技。张弛说： 凭什么这种绝技只有你会别人不会。 你过得每一个弯，都没有再来一次 你犯的每一个错，都有可能断送整场比赛 我们要做的，就是在不断逼近极限的同时，犯更少的错误，在最危险的路段，开着这台车全速前进。 你耍小聪明，赢得了100米，赢不了100公里。 你问我绝招？只有两个字：奉献。就是把你的全部奉献给你所热爱的一切。 是的，张弛真真切切的做到了奉献。他真的把生命，奉献给了他所热爱的事业。 当赛车冲出悬崖的那一刻，世界仿佛停滞了。镜头给了每一个人，每一个平凡的人，每一个张弛在生命中遇见的人。夕阳洒在每一个人的脸上，记星眼里含着泪水，小张飞喂着他的羊，宇强发了疯般的骑上摩托车要去终点，大哥坐在拘留所里默默的望着窗外。 而张弛，坐在赛车中冲向夕阳的他，在他的眼里，我看到了释然，却也看到了不舍。 影片结尾有个彩蛋，他的儿子找来同学的爸爸，来比速度，然而人家是飞行员，都不在一个量级上。眼看飞机飞过头顶，小张飞掏出一枚游戏币，投入了虚幻的投币口，赛车直接变身飞机，飞进了二次元的世界。 这是一个梦，一个甜蜜的，不忍戳穿的梦。 我们每个人，都做过这样的梦。在经历了无数努力、无数坎坷、留下无数汗水之后，却仍然获得一个不甚满意的结局。我们不愿接受，却又不得不接受。 今天只有残留的躯壳， 迎接光辉岁月， 风雨中抱紧自由 一生经过彷徨的挣扎 自信可改变未来 问谁又能做到 影片中致敬了许多经典，有光辉岁月，有守望先锋，有圣斗士星矢，有朴树，也有曾经的拉力冠军。 影片中没有反派，更多的，是对比。一个昔日的落魄车王，一个年轻多金的高富帅，他们孰强孰弱或许难下定论，但我觉得，韩寒想表达的是，你说条条大路通罗马，可偏偏有人就生在罗马。 难道说我们的奋斗就没有意义了吗？ 显然不是的。 只有一个人对自己失去信心的时候，他才是真的过时了。用热血浇灌的事业，不会让你失望。 电影里还有一句话 我没想赢，但我不想输。 我女票特喜欢这句话，这句话也成为了她的众多人生格言中的一条。 但是我，并不是特别能理解这句话。工科男的清奇脑回路 想赢就是想赢，为什么非要说成不想输呢？或许等我经历更多的事情以后，就会理解这种心境吧。 我们继续回到电影，最后想说的，就是关于友情。 人在顺境时候的友谊，可能不是那么坚固的。 我们看到了落井下石，看到了成人世界的虚伪，看到了形形色色的面具仿佛就在我们身边游荡。今天他搂着你肩膀说：我这辈子就你这个兄弟。你感动的都快哭出来了，明天呢，你破产了，他绝对离你远远的。张弛经历过这样的无助，也看透了所谓的人间冷暖。 当你如日中天的时候，不要对别人掏心掏肺，因为某些人的虚伪、奉承、巴结、讨好，是已经深深的烙在骨子里，你想也想不到的。 《平凡之路》 我曾经跨过山河大海 也看过 人山人海 我曾经拥有这一切 转眼都飘散如烟 十年前你说没有什么能够阻挡，你对自由的向往。 十年后你说平凡才是唯一的答案。 不管怎样，我们所热爱的一切，是我们的选择。 心之所向，无远弗届。]]></content>
      <categories>
        <category>影评</category>
      </categories>
      <tags>
        <tag>梦想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TECHNICAL WRITING IN ENGLISH]]></title>
    <url>%2F2019%2F07%2F04%2FTECHNICAL-WRITING-IN-ENGLISH%2F</url>
    <content type="text"><![CDATA[外教蛮帅的哦！ Three Golden Rules Focus on READABILITY Focus on STRUCERS Don’t forget ETHICS Appropriate language(READABILITY) Level of Formality say→ state think → believe put out → publish find out → investigate for sure → with certainty people → individuals Avoid contraction x don’t aren’t isn’t √ do not No emotion DON’T USE ANY ADJCTIVES Such as: beautiful; surprising Can only use: hope fear disappointment satisfaction Don’t be vague few enough a lot Practical and Precise Sentence Pain and simple 1.Length: short over 30 words are hard to read 2.One general idea pre sentence 3.Use more passive forms Transform too complex academic writing into clear via: Deleting redundancies（冗余） Dividing long sentences into many shorter sentences Replacing ‘hundred-dollar words’ with ‘ten-cent words’ whenever possible 意思是说，不要为了用高级词汇而用高级词汇 Being factual, clear and emotion-less, instead of being metaphoric(隐喻) or poetic Structure REMEMBER----------- Scientific writing is NOT literature “I M R A D ” theory I -----------Introduction 直入主题，不拖泥带水 M----------Materials and Methods 理论事实支撑 R----------Results 总结 A----------(And) D----------Discussion Be Ethical and Honest a) Accuracy ----------Be honest in your results b) Originality -------Your finding must be new --------DON’T SEND the same paper to several publishers c)Plagiarism --------Do not take credit for someone else’s work.(不要把工作归功于别人) Different between China and Western Countries Don't be too modest Western people are likely to promote their own selves Just like Trump💩 They favors individuality and personal success You mustn’t feel embarrassed about putting forward your findings, and those of others, as individuals. Go straight to the point Paragraphs and Sentences A paragraph is a series of sentences that are organized and coherent, and are all related to a single main idea, a topic How they work? a series of brief examples or a single long illustration of a general point; It might describe a place, character, or process; narrate(讲述) a series of events; compare or contrast two or more things; classify items into categories; or describe causes and effect. TOPIC SENTENCES Sentences that contain topic and the controlling idea EXAMPLES: People can avoid plagiarizing by taking certain precautions There are several advantages to online education Examples or explanations --------The body Conclusion or link This last part summarises the connections between the information discussed in the body of the paragraph and the paragraph’s controlling idea. It can also link the paragraph with the next one and to the main topic of the essay More tips Be consistent with - Don’t switch point of view.(不要切换观点) - Stick with the same verb tense (past or present) Use transition words - first of all - for example - in the other words - in fact - moreover - instead of Repeat key words and phrases(短语) Another Golden rule: Make short sentences BUT DO NOT just for writing short sentences.When there are only short sentences, it feels robotic or choppy. Vary length from 12 to 20 words. Our goal is to make it easier to understand. E-mails]]></content>
      <categories>
        <category>科研英语写作</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端笔记(一)]]></title>
    <url>%2F2019%2F07%2F03%2F%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[“ 爱你所爱，无问西东 基础元素 声明 &lt;!DOCTYPE&gt;用于说明页面的HTML版本 &lt;head&gt; &lt;body&gt;具体内容 &lt;title&gt;显示在标签栏上 &lt;h1&gt; &lt;h2&gt;.......标签 &lt;p&gt;段落 &lt;a href=&quot;&quot;&gt;xxx&lt;/a&gt;把xxx作为超链接 &lt;img src=&quot;&quot;&gt;图片 &lt;br/&gt;换行（空元素） 常用属性 &lt;h1&gt;:align 对齐方式 right left center &lt;a&gt;:target 在何处打开链接 &lt;body background&gt; 背景图片 &lt;body bgcolor&gt; 背景颜色 通用属性 class类名 &lt;style type=&quot;&quot;&gt;用于引入css属性 格式化 &lt;b&gt;加重 &lt;big&gt; &lt;em&gt; &lt;i&gt;斜体 &lt;strong&gt; &lt;sub&gt;下标 &lt;sup&gt;上标 &lt;del&gt;删除字（即横划线） &lt;ins&gt;插入字 样式 标签 &lt;style&gt;样式定义 &lt;link&gt;资源引用 &lt;img&gt; &lt;a&gt;链接标签 文本链接 图片链接 属性 rel=&quot;stylesheet&quot; 外部样式表 type=&quot;text/css&quot; 引入文档类型 margin-left 边距 alt 元素属性声明（在图片加载不出来的时候仍能显示的文本） name 文档内链接（用于跳转到注释处） 例： 12&lt;a name="tips"&gt;hello&lt;/a&gt;&lt;a href="#tips"&gt;跳转到hello&lt;/a&gt; 插入方法 外部样式表 &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot; 直接在&lt;head&gt;标签里加入就可以，相关的元素直接就以mystyle.css中的样式显示。 内部样式表 1234&lt;style type="text/css"&gt;body &#123;background-color: red&#125;p &#123;margin-left: 20px&#125;&lt;/style&gt; 这是定义了body元素和p元素的样式。 表格 &lt;table&gt;里面可以设定单元格边框border 设定单元格大小cellpadding 设定单元格间距cellspacing 设定单元格颜色bgcolor &lt;caption&gt;表格标题 &lt;th&gt;第一行表头 &lt;tr&gt;表格的定义 &lt;td&gt;一行的表格数据（要放在&lt;tr&gt;里） &lt;ul&gt;标签 列表 无序列表 相关标签 &lt;ul&gt;定义 &lt;li&gt;项 属性 前面的标号：（在&lt;ul&gt;中定义type属性 disc实体圆 circle空心圆 square方块 有序列表 &lt;ol&gt;定义 &lt;li&gt; 属性 编号方式： A a I罗马数字 start 嵌套列表 即列表中再嵌套一个列表 &lt;ul&gt; &lt;ol&gt; &lt;li&gt; 自定义列表 默认没有编号 &lt;dl&gt;定义 &lt;dt&gt;项名 &lt;dd&gt;具体描述 HTML块 块元素，总是以新行开始，不会连在一起。如&lt;h1&gt; &lt;p&gt; ul div元素 &lt;div&gt;元素，用于引入css样式。 用法如下： 在head中添加css文件链接&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;xxx.css&quot;&gt; 然后在body中添加 123&lt;div id="xxx"&gt; &lt;h&gt;.......&lt;/h&gt; &lt;/div&gt; 然后在xxx.css中定义id#xxx {....}即可。 span元素 只用于文本元素的div的特殊下属 1234567891011&lt;head lang="en"&gt; &lt;style type="text/css"&gt; span&#123; color: blue; &#125;&lt;/head&gt;&lt;body&gt; &lt;div id="divspan"&gt; &lt;p&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++学习笔记(一)]]></title>
    <url>%2F2019%2F07%2F02%2Fc-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%9C%2F</url>
    <content type="text"><![CDATA[吾辈青年岂容卸甲，唯有自请长缨，日夜兼程。 变量声明 #include&lt;sdtio.h&gt;是c的头文件，而cpp的头文件是#include&lt;iostream&gt; 12345678910111213141516171819202122232425262728293031#include&lt;stdio.h&gt;#include&lt;math.h&gt;int sum(char *p,char *f,int m,int n)&#123; double s=0.0; int i,j,c,d; for(i=0;i&lt;m;i++) s+=(*(p+i)-'0')*(pow(10,m-i-1)); for(j=0;j&lt;n;j++) s+=(*(f+j)-'0')*(pow(10,n-j-1)); char a[100]; sprintf(a,"%.f",s); puts(a); return 0;&#125;int main()&#123; char a[20],b[20]; int m,n; int sum(char *p,char *f,int m,int n); char *p; char *f; scanf("%d %d",&amp;m,&amp;n); scanf("%s",a); scanf("%s",b); p=a; f=b; sum(p,f,m,n); return 0;&#125;]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构]]></title>
    <url>%2F2019%2F05%2F31%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[数据结构好难 数据结构 - 幕布 数据结构 串 链式存储 索引存储 带长度的索引表 带末指针的索引表 带特征位的索引表 链式模式匹配算法 精髓：定义三个指针------first,sptr,tptr 用first指示当前剩余字符串中的第一个 用sptr从first位从前往后匹配 用tptr指示待匹配的值并后移 一旦不一致，first后移，sptr重置，tptr重置 数组 稀疏矩阵三元组表 三元组=（行i，列j，非零元素值）——行优先 数据结构描述 三元组----先用一个node类型的一维数组储存一类值，然后在值内分配 i,j,v三个属性，从而超越了二维属性的限制 转置算法 本来应该直接把存储的行号列号交换一下就可以，但这样得到的是列优先的稀疏矩阵，我们需要行优先的 第一步只是把“行数”和“列数”转换，并未对实际矩阵产生影响；第二步才是按列查找（因为它们转置成了行，而我们要以行优先储存），双重循环，才能实现排序！从0开始（因为它们是之后的行号） 栈 定义 形象结构 入栈 出栈 队 定义 循环队列 形象示例 置空队 入队 出队 关于返回指针的函数在主函数中的调用]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[线代笔记哦]]></title>
    <url>%2F2019%2F05%2F23%2F%E7%BA%BF%E4%BB%A3%2F</url>
    <content type="text"><![CDATA[要不要点进来看看呀 线性代数 - 幕布 线性代数 矩阵 等价矩阵 A和B经过一系列初等变换可以相互转化 三角矩阵 分块矩阵 转置 求逆 共轭矩阵 转置矩阵 对称矩阵 反对称矩阵 此矩阵主对角线上元均为0 逆矩阵 （AB)(-1)=B(-1)*A^(-1) 伴随矩阵法求逆矩阵 Ax=B型 (A|B)=(E|A^(-1)*B) 右侧为代求x xA=B型 上下拼，然后初等列变换 初等矩阵均为逆矩阵 初等矩阵（3种） &lt;span class=&quot;content mubu-node&quot; style=&quot;line-height: 24px; min-height: 24px; font-size: 16px; padding: 2px 0px; display: inline-block; vertical-align: top;&quot;&gt;上下拼，然后初等列变换&lt;/span&gt; &lt;span class=&quot;content mubu-node&quot; style=&quot;line-height: 24px; min-height: 24px; font-size: 16px; padding: 2px 0px; display: inline-block; vertical-align: top;&quot;&gt;交换行&lt;/span&gt; &lt;span class=&quot;content mubu-node&quot; style=&quot;line-height: 24px; min-height: 24px; font-size: 16px; padding: 2px 0px; display: inline-block; vertical-align: top;&quot;&gt;在第i行乘k&lt;/span&gt; &lt;span class=&quot;content mubu-node&quot; style=&quot;line-height: 24px; min-height: 24px; font-size: 16px; padding: 2px 0px; display: inline-block; vertical-align: top;&quot;&gt;将第j行k倍加到i行&lt;/span&gt; 对任意矩阵进行初等行变换相当于左乘初等矩阵 对任意矩阵进行初等列变换相当于右乘初等矩阵 对角矩阵 阶梯形矩阵 只是阶梯状，无任何约减 最简形矩阵 非零行的第一个非零元为1，且这些非零元所在的列的其他元素都是零。 标准形矩阵 行最简形矩阵再经过初等列变换，可化成标准形。 伴随矩阵 性质 注意其实它的所有位置都转置了 行列式 |A|或det A sgn()即逆序数，后面求和中有n!个连乘式子，需要满足每行每列元素只出现一次，但具体位置并不固定（三阶较为直观，可以用对角线法，高阶非常复杂，无法直接套用） 性质 即|kA|=k^n*|A|​ 按行（列）展开 余子式 A的一个k阶余子式是A去掉了k行与k列之后得到的(m-k)×(n-k)矩阵的行列式。 代数余子式 余子式只计算去掉某行某列之后剩余行列式的值，而代数余子式则需要考虑去掉的这一个元素对最后值正负所产生的影响。 当非对应行的元与Aij相乘，则乘积之和为0，注意：不是单项为0 特殊行列式 主对角上三角行列式 上三角是主对角线元素乘积​ 斜下三角行列式 注意前面的逆序！​ 箭型行列式 解法 两三角型行列式 解法 a,b不等 解法—拆行法 更复杂的例子 更更复杂的例子 解法（加边升阶法) 两条线型行列式 范德蒙德型行列式 解法（化成范德蒙德行列式）]]></content>
  </entry>
  <entry>
    <title><![CDATA[不朽的文明]]></title>
    <url>%2F2019%2F03%2F28%2F2019-03-28-%E4%B8%8D%E6%9C%BD%E7%9A%84%E6%96%87%E6%98%8E%2F</url>
    <content type="text"><![CDATA[——读《三体》有感。 一百五十亿光年的范围内充满杀机。 “地球往事”三部曲，就这样为我们展开了这样一幅如此惊心动魄，充满黑暗却未失人性的图景。刘慈欣告诉我们，光年之外的宇宙是这样的。 “这是一个捉摸不透的黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭之。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景。” 他将人类的文明发展当作一个整体的过程置于宇宙的背景之下，透过文字，描写众生，将各种人在危机面前的心理活动进行了细致描写，可以说，他对人类的批判的深刻性达到了科幻小说从未有过的高度。那些沉重的道德问题、责任问题、信仰问题，为《三体》这部硬科幻注入了弥足珍贵的人文基因，也给我们这些读者，留下了更加广阔的思考空间。 在作者的笔下，通过一个极其大胆的想法，人类第一次进行了恒星级宇宙广播，也让另一个高等文明——三体文明，知道了人类文明的存在。当两个文明相遇，猜疑，便在充满不确定性的黑暗宇宙里悄然蔓延。 一边是气候适宜，稳定运转的地球，一边是运动轨迹无解，酷热与极寒交织三体世界。对于三体文明而言，地球就像是天堂，是梦，是他们想也不敢想的奢望。但文明的贪婪，从未消失过。于是三体人，决定占领地球。 面对三体文明的攻击，人类竟毫无反手之力。人类，在三体人眼里就像是虫子，可悲、弱小的虫子一样，等待着不可避免的灭亡。 然而，谁说虫子会灭亡呢？ “人类竭尽全力消灭它们，用尽各种毒剂，用飞机喷洒，引进和培养它们的天敌，搜寻并毁掉它们的卵，用基因改造使它们绝育，每个办公桌下都有像苍蝇拍这种击杀它们的武器……这场漫长的战争伴随着整个人类文明，现在仍然胜负未定，虫子并没有被灭绝，它们照样傲行于天地之间。把人类看做虫子的三体人似乎忘记了一个事实：虫子从来就没有被真正战胜过。” 是的，虫子从未被真正战胜，即使是双方实力如此悬殊。 三体文明绞尽脑汁，破壁计划、智子封锁、水滴攻击……一次又一次的打击，依旧有人心怀希望，脚下步履不停，因为人类拥有与生俱来的生命尊严，而不屈的灵魂，不会被打败！ 刘慈欣想给我们呈现的，并不仅仅是三体与人类之间的战争，而是对于文明的思考。三体文明已经远远超过人类，但当人类将它的空间位置暴露之后，立刻遭受了其他更高级文明的毁灭性打击。而宇宙中的文明，多到难以想象，有些文明，我们甚至永远无法观测—因为他们在更高维度的空间，但文明之间的掠夺，却从未停止。作者提出宇宙社会学，向我们介绍了文明的两大公理——第一，生存是文明的第一需要。第二，文明不断增长和扩张，但宇宙中的物质总量保持不变。毫无疑问，宇宙间是赤裸裸的生存法则：高等文明绝不友善，会毫不犹豫消灭宇宙中任何它认为有威胁的低等文明。 那么，文明存在的意义究竟是什么呢？在书中，人类全部的荣誉、努力、勇敢和辉煌，被歌者文明的清理操作而轻易终结。如果真的存在这样的文明，人类的努力又是否有意义？ 显然，质疑人类文明的人陷入了虚无主义的泥淖。人类文明，从开蒙伊始，发展到如今，必然衍化出它独特的意义。我们探索未知，用道德约束人心，诗歌流露人性光辉。海洋的最深处我们已经到达，探测器正飞向柯伊伯带去延伸人类认知边界，对于人类生命的探索科学家从未停下脚步。这还不够吗？人类文明的意义，贯穿整个人类的发展史，体现在方方面面。 我们，仅仅是这文明宏伟历程中的一个小小过客，岁月长河漫漫，不朽的，是文明本身。 不如给岁月以文明，心向寰宇，风雨平生。]]></content>
      <categories>
        <category>读后感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[写给二〇一八的年终总结]]></title>
    <url>%2F2018%2F12%2F30%2F%E5%86%99%E7%BB%992018%2F</url>
    <content type="text"><![CDATA[这是我写下的第二篇年终总结。 不要问我第一篇是哪一年的(我也记不清了) 是什么促使我下定决心写一篇年终总结呢？因为今年，与众不同。 今年反生了很多事，多到我猝不及防，却一件又一件的像梦一样倏忽而过。但我还是过完了这精彩而又惊心动魄的一年。 高三·寒窗十载，跋涉万里 我终究来到了高考面前。 曾经无数个日日夜夜念叨着的高考，敬仰着的高考，终于见到了它的真容。 在我的印象里，高考应该是刻板严肃的老学究，背着个手，踱来踱去，谁偷懒了，就用戒尺在他手背上敲上一下。在他面前，任他是多么捣乱的学生也不敢造次。 在我的印象里，高三应该是最灰暗的日子，没日没夜，废寝忘食(好像有点过了)，在一道道解析几何，导数大题，理综压轴的泥淖里拼命挣扎，在宿舍、教室、食堂三点一线中日复一日。 直到我来到高三，我才发现，事实并非如此。 去年暑假，我们搬到了高三教学楼，紧凑的教室并没有想象中的压抑。四只风扇在头顶乱舞，窗边的盆栽努力的活着(几乎没人浇水)，教室朝南，阳光很好，空气中悬浮的粉笔灰看得清清楚楚。我喜欢这儿。 开学全市统考如约而至，糟糕的成绩诉说着暑假的潇洒(捂脸)。扶我起来，我还能学！ 我开始了高三模式。 又买了一本练习题？刷！发现某考卷不错？刷！一言不合，就刷刷刷！好的我成功的陷入了刷题的死循环。当然，刷题应该是有效果的，但效果持续时间不长，且仅在小考中发挥(要哭了)。我有一个本子，记录着我高中三年大大小小每一次正规考试的年级排名，就看呀那跌宕起伏的折线图，哟这里好高，一看，噫，原来是月考，哟这里咋这么低，一看，期末/模拟……对，我就是那种一到大考就瞪不起眼的人，且成功将这种体质延续到了高考，当然这是后话了。 刷题的路上，全班每一个人，都在疯狂前进。 ​ 我和冰哥成了刷题上的战友，(不过冰哥比我刷的快)，一本又一本金考卷、押题卷、衡水金卷就这样在我们的手中变成了废纸一堆，然而还是买多了(暴风哭泣)，家里还有一摞练习题。（高考完那个暑假还琢磨怎么卖掉–有需要的小伙伴请联系我!) 高考的脚步声近了。 我还清楚得记得，在2018年1月1日那天，我们班级的元旦活动。 那天可真热闹呀，Ivy给我们唱了一首歌(唱的超好听)，然后娜姐表演了一个魔术(真的好厉害！)，华姐给我们用&quot;标准的普通话&quot;深情朗诵，当然，我们每个同学都录了祝福的话，留给多年后的自已一个回忆。我还记得wyp说了&quot;希望我们青年一辈，冷风热血，荡涤乾坤&quot;，(果然不忘嘲讽我)，把我乐的。不过呀说到wyp我就想起了西游记里高三下学期我一件比较后悔的事情。之前我们是同位，关系应该算很好了，不过他总是喜欢嘲讽我？或者找我事？一开始我也就当玩笑听听，但是应该是持续了相当长一段时间，我真的受不了了简直烦死我了，于是某天午休当他再一次&quot;骚扰&quot;的时候，我脾气蹭的一下上来了，然后发生了一些很不愉快的事情。于是从那天开始，wyp与我，绝交。到今天也没有再说过一句话。虽然这对我来确实没什么，但是还是觉得有点可惜。怎么说呢，希望他未来还能像少年时那样脾气好，就这样吧，相忘于江湖也不失是一个好归宿。 元旦一过，大家又立刻投入到紧张的备战当中。 期末、一模二模三模、无数次理综、数不清的卷子，排名变了又变（当然学霸还是学霸，像我这样的学酥就只能起起伏伏，飘忽不定）。排名于我而言早已麻木，我要的是熟练，我要的是仔细！错误的原因有很多，但结果只有一种。我只有把所有的原因一一避开，才能拥有最终的正确。于是，我依旧在孜孜不倦的刷题。 我习惯了教室午休，习惯了一个人去食堂。 我习惯了第二节晚自习下课冲出教室，去操场跑圈，去体育馆后面昏黄的小道上走一走，闻一闻花香，让疲惫了一天的自己放松一下(要不然写题写到脑仁疼)。 高三，是我对五十八中了解的最细致的一年。 从初春到仲夏，我留心了校园的花花草草。虽然我不知道它们叫什么，但我真的很喜欢它们的味道，那一丛一丛的，开得顾盼生姿的花，洁白的令我陶醉。 余路还要走多久，你牵着我的手。 高考终究还是来了。 两天。四场考试。三年就画上了句号。 并没有我想象中的顺利，虽然题有我想象中的简单，但是我还是无法控制的紧张过度，留下了很多的遗憾。 但不管怎样，我还是我，我不后悔。 踽踽独行，不惜万里蹀躞。 高考，是终点也是起点。 只是，从此以后，万里长路，山河寂寥。 我的大学·西军电 9月，梦想再一次起航。 远离了故土，远离了海风，远离了海，远离了亲人和朋友，我来到了西安，这个古老与现代并存的城市。 说实话，一方水土养一方人，西安这里给我留下的第一印象就是，这的人懒。 为什么这么说呢，大早上出去买早餐，都七点多了，**大街上没有几家店开门！**我真的纳了闷了早餐店不应该早早的开门吗？还是夏天，天亮的早，为什么不愿意赚钱呢？后期走访(购物)发现，好多店都是十点以后开门(郁闷)。 好了说正事。 来到了西电，哇新校区好漂亮呀，开心开心。 军训为什么十四天啊喂！为什么这里下午这么晒啊！为什么教官这么认真的摧残我们啊！看到小伙伴们的军训那么水，还在练军体拳的我默默在心中留下了眼泪。 万万没想到！在我们艰苦卓绝的不懈努力下，求的雨终于！在汇报演出的那！天！下！了！本来一直是暴雨，都说要取消演出了，然而学校骚操作你永远也想不到，给我们每个人，发了一套塑料雨衣，对没错，我们是披着雨衣踢完的正步。冰冷的雨水就这样在我脸上胡乱的拍打。（自己求得雨，哭着也要把它淋完.jpg） 好吧，军训除去晒和累，还是很好玩的。 我们的连长比我们大了五岁左右吧，是一个非常可爱的小伙子。我们是他第一次带的学员，他本身也是军校大一的学生。他总是跟我们讲，不要老玩游戏，好好把学习搞上去，不要像他一样大三了再去考军校当兵。我听出了他的无奈。 亲爱的连长，也请你继续完成你的梦想！ 之后呢，很开心，遇到了一群很可爱的小伙伴，包括我的舍友兄弟们以及院里的同学呀。 虽然社团面试无一例外全都被刷了，但是我也没有那么不开心(才怪)。 接下来开始正式大学学习生活啦。 很努力的学高数。 然而。 天不遂人愿。 期中，只有80分。 好吧，让我再熟悉熟悉题型，期末杀他个片甲不留！ 接下来是碎碎念时间。 西安这里冬天7点天还是黑的，给我一种错觉还是晚上，所以经常性堕落(起的好晚)，这跟我头一天12点睡似乎也有关系(捂脸)。 舍友们还是一群很上进的小伙伴。有好多大佬呀。我要加把劲啦。 校园里撒狗粮的好多呀，猝不及防。 我天天吃这么多咋还没长胖呀(逃)。 感谢的人 首先呢，当然是感谢我妈妈啦！感觉妈妈好辛苦但是我却抽不出时间和妈妈打电话……那就今天晚上吧！很感谢妈妈的关心，虽然不好意思说但我真的爱您呀妈妈！希望2019年，时光能善待我妈妈，她身体健健康康平平安安我就超级开心啦！ 然后呢，是我的小仙女品子啦！手动比心比心比心。谢谢你一直陪伴着我，今天就是我们恋爱5周年的Anniversary啦，好开心呀！虽然我们一直异地，但是我期待将来某一天能有一个我们自己的小窝！努力去追寻自己的梦想吧！ 还有我高中陪伴了我两年的同位老铁家傲，前不久闲聊，字里行间还是透露出浓郁的上世纪知识分子的气息哈哈，给我剪辑的宣传片提供了建议，很感谢啦！希望你在南昌不要因为设计图纸搓光面包。加油老铁！ 以及多年好友冰哥，大学里的舍友们，因为你们，我不再独身一人。 愿你我一路繁花似锦，山水相拥，青山为伴。 Lyric Time 2018再见 作为一个信安狗文艺青年怎么能忘记抒情呢？ 2018，我走过很多的路，流下了很多的汗，有很多欢笑，也有不少泪水。 身经百战，我从没想过放弃。 单枪匹马，我完成了人生的第一次跨越。 2018，我留下几万字的摘抄，读过许多书。 我们都说过去了，风轻云淡，我们相信未来依旧有生生不息的希望和不期而遇的温暖。 生活虽然可能荆棘遍地，但仍不能阻止你一路高歌。 生命，其实最后总能成诗。 把酒祝东风，且共从容。 2018，谢谢你，这段日子，我很珍惜。 再见了，2018。 2019你好 2019，希望是我从小白蜕变成dalao的起点。 2019，希望我的家人平安健康，希望我爱和爱我的人一切顺利，希望日子里仍有感动长在。 年少时的热血，如今仍在沸腾。面对信息安全，我将不遗余力。 曾经承诺过要读很多书，留下很多随笔。2019，我不会忘记。 想要结识更多的朋友，想要学业在上一层楼。 想把岁月唱给你听。 2019，希望一切，都是最好的样子。 2019，加油。 我的新年flag]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Pika]]></title>
    <url>%2F2018%2F12%2F29%2FPika%2F</url>
    <content type="text"><![CDATA[Pika Pika!]]></content>
      <categories>
        <category>萌萌萌萌！</category>
      </categories>
      <tags>
        <tag>萌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创造，让未来无限可能]]></title>
    <url>%2F2018%2F12%2F28%2F%E5%88%9B%E9%80%A0%EF%BC%8C%E8%AE%A9%E6%9C%AA%E6%9D%A5%E6%97%A0%E9%99%90%E5%8F%AF%E8%83%BD%2F</url>
    <content type="text"><![CDATA[/----写在前面----/ 曾经，有梦。 如今，未忘。 我不会选择做一名普通人。 自命不凡是天赋人权——只要我能。 我寻求机遇，而非安稳。 我也从不愿去做顺民， 在国家的保障下变得卑躬沉沦。 我要尝试那精心的冒险； 去梦想也去创造，去失败也去成功。 我拒绝失去激励而获得救助； 我宁愿接受生活的挑战，不甘心保有确定的现状； 成就带来的欣喜远比乌托邦式的平静更令我向往。 我不会为福利而牺牲自由； 也不会为施舍而放弃尊严。 在任何大师面前我不会胆怯； 在任何威胁面前也决不屈服。 我的天性是昂然挺立，自豪无惧； 按照内心的方式敢想敢为。 我享受自我创造产生的果实； 坦然面对这个世界，然后说： 此生，拜上帝之助，我有所作为。 充满鲜花的世界到底在哪里 如果它真的存在那么我一定会去 我想在那里最高的山峰矗立 不在乎它是不是悬崖峭壁 用力活着用力爱哪怕肝脑涂地 不求任何人满意只要对得起自己 关于理想我从来没选择放弃 即使在灰头土脸的日子里 也许我没有天分 但我有梦的天真 我将会去证明用我的一生 也许我手比脚笨 但我愿不停探寻 付出所有的青春不留遗憾 向前跑 迎着冷眼和嘲笑 生命的广阔不历经磨难怎能感到 命运它无法让我们跪地求饶 就算鲜血洒满了怀抱 继续跑 带着赤子的骄傲 生命的闪耀不坚持到底怎能看到 与其苟延残喘不如纵情燃烧吧 有一天会再发芽 未来迷人绚烂总在向我召唤 哪怕只有痛苦作伴也要勇往直前 我想在那里最蓝的大海扬帆 绝不管自己能不能回还 失败后郁郁寡欢 那是懦夫的表现 只要一息尚存请紧握双拳 在天色破晓之前 我们要更加勇敢 等待日出时最耀眼的瞬间 向前跑 迎着冷眼和嘲笑 生命的广阔不历经磨难怎能感到 命运它无法让我们跪地求饶 就算鲜血洒满了怀抱 继续跑 带着赤子的骄傲 生命的闪耀不坚持到底怎能看到 与其苟延残喘不如纵情燃烧吧 为了心中的美好 不妥协直到变老]]></content>
      <tags>
        <tag>梦想</tag>
      </tags>
  </entry>
</search>
